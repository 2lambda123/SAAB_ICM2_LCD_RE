#!/usr/bin/python3
# SLOW, USE FLASHROM INSTEAD
import serial
import time

BUSPIRATE_PORT = '/dev/ttyUSB0' #customize this! Find it in device manager.

# DISPLAY PARAMETERS
# Visible width: 106
# Visible height: 8x8

text_storage = []
def send(ser,cmd, storeResult=False):
    """send the command and listen to the response."""
    ser.write(str(cmd+'\n').encode('ascii')) # send our command

    for line in ser.readlines(): # while there's a response
        if(storeResult):
            text_storage.append(line.decode('utf-8').strip())
        else:
            print(line.decode('utf-8').strip()) # show it

def lcd_init():
    send(ser,"[0x78,0x00,0x01,0x10]")
    send(ser,"[0x78,0x00,0x01,0x0e,0x12]")
    send(ser,"[0x78,0x00,0x01,0x0e,0x06]")
    send(ser,"[0x78,0x00,0x01,0x0e,0x0a]")

    send(ser,"[0x78,0x00,0x01,0x0e,0x24]")
    send(ser,"[0x78,0x00,0x01,0x0e,0x84]")
    send(ser,"[0x78,0x00,0x01,0x0d,0x0a]")
    send(ser,"[0x78,0x00,0x01,0x0d,0x13]")

    send(ser,"[0x78,0x00,0x01,0x0d,0xb7]")
    send(ser,"[0x78,0x00,0x01,0x0d,0x07]")
    send(ser,"[0x78,0x00,0x01,0x0b,0x04]")
    send(ser,"[0x78,0x00,0x01,0x0b,0x40]")

def slowClear():
    send(ser,"[0x78,0x00,0x01,0x40]")
    send(ser,"[0x78,0x00,0x01,0x20]")
    send(ser,"[0x78,0x00,0x01,0x80]")
    send(ser,"[0x78,0x40,0x00:132]")

    send(ser,"[0x78,0x00,0x01,0x41]")
    send(ser,"[0x78,0x00,0x01,0x20]")
    send(ser,"[0x78,0x00,0x01,0x80]")
    send(ser,"[0x78,0x40,0x00:132]")

    send(ser,"[0x78,0x00,0x01,0x42]")
    send(ser,"[0x78,0x00,0x01,0x20]")
    send(ser,"[0x78,0x00,0x01,0x80]")
    send(ser,"[0x78,0x40,0x00:132]")
    
    send(ser,"[0x78,0x00,0x01,0x43]")
    send(ser,"[0x78,0x00,0x01,0x20]")
    send(ser,"[0x78,0x00,0x01,0x80]")
    send(ser,"[0x78,0x40,0x00:132]")

    send(ser,"[0x78,0x00,0x01,0x44]")
    send(ser,"[0x78,0x00,0x01,0x20]")
    send(ser,"[0x78,0x00,0x01,0x80]")
    send(ser,"[0x78,0x40,0x00:132]")

    send(ser,"[0x78,0x00,0x01,0x45]")
    send(ser,"[0x78,0x00,0x01,0x20]")
    send(ser,"[0x78,0x00,0x01,0x80]")
    send(ser,"[0x78,0x40,0x00:132]")

    send(ser,"[0x78,0x00,0x01,0x46]")
    send(ser,"[0x78,0x00,0x01,0x20]")
    send(ser,"[0x78,0x00,0x01,0x80]")
    send(ser,"[0x78,0x40,0x00:132]")

    send(ser,"[0x78,0x00,0x01,0x47]")
    send(ser,"[0x78,0x00,0x01,0x20]")
    send(ser,"[0x78,0x00,0x01,0x80]")
    send(ser,"[0x78,0x40,0x00:132]")

    send(ser,"[0x78,0x00,0x01,0x48]")
    send(ser,"[0x78,0x00,0x01,0x20]")
    send(ser,"[0x78,0x00,0x01,0x80]")
    send(ser,"[0x78,0x40,0x00:132]")

def drawMain():
    send(ser,"[0x78,0x00,0x01,0x40]") # Start line is 0x40
    send(ser,"[0x78,0x00,0x01,0x20]") # Not sure what the 20 represents, height?
    send(ser,"[0x78,0x00,0x01,0xb6]") # Old was B6 for MAIN TEXT # 0x80 is x offset 0, real display starts at x+14, so 0x8E

    # Main text thing
    send(ser,"[0x78,0x40,0x00,0x7f,0x20,0x18,0x20,0x7f,0x0,0x3f,0x48,0x48,0x48,0x3f,0x0,0x41,0x7f,0x41,0x0,0x7f,0x10,0x08,0x04,0x7f,0x00,0x00]")
    
def drawMenu():
    send(ser,"[0x78,0x00,0x01,0x41]")
    send(ser,"[0x78,0x00,0x01,0x20]")
    send(ser,"[0x78,0x00,0x01,0x8E]")

    send(ser,"[0x78,0x40,0x2F,0x2C,0x2D,0x2D,0x2D,0x2E,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2C,0x2F,0x2F,0x2D,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20]")
    time.sleep(5)

    send(ser,"[0x78,0x00,0x01,0x41]")
    send(ser,"[0x78,0x00,0x01,0x20]")
    send(ser,"[0x78,0x00,0x01,0x8E]")
    send(ser,"[0x78,0x40,0x2F]")

    send(ser,"[0x78,0x00,0x01,0x41]")
    send(ser,"[0x78,0x00,0x01,0x20]")
    send(ser,"[0x78,0x00,0x01,0xF5]")
    send(ser,"[0x78,0x40,0x20]")

    send(ser,"[0x78,0x0,0x1,0x42]")

    send(ser,"[0x78,0x0,0x1,0x20]")
    send(ser,"[0x78,0x0,0x1,0x8E]")
    send(ser,"[0x78,0x40, 0xFF, 0x07, 0xBF, 0x9F, 0xAF, 0x77, 0xFF, 0xEF, 0x57, 0x57, 0x57, 0x87, 0xFF, 0x8F, 0x77, 0x77, 0xB7, 0x07, 0xFF, 0x77, 0x07, 0xF7, 0xFF, 0x8F, 0x77, 0x77, 0x77, 0x8F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]")


    send(ser,"[0x78,0x0,0x1,0x43]")
    send(ser,"[0x78,0x0,0x1,0x20]")
    send(ser,"[0x78,0x00,0x01,0x8E]")
    send(ser,"[0x78, 0x40, 0x00, 0x1F, 0x10, 0x10, 0x08, 0x07, 0x00, 0x04, 0x17, 0x00, 0x00, 0x02, 0x05, 0x05, 0x05, 0x00, 0x00, 0x03, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]")

    
    send(ser,"[0x78,0x0,0x1,0x44]")
    send(ser,"[0x78,0x0,0x1,0x20]")
    send(ser,"[0x78,0x00,0x01,0x8E]")
    send(ser,"[0x78, 0x40, 0x00, 0xC0, 0x40, 0x40, 0x80, 0x00, 0x00, 0x40, 0xC0, 0x40, 0x00, 0x40, 0x40, 0x40, 0x40, 0x80, 0x00, 0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]")


    send(ser,"[0x78,0x0,0x1,0x45]")
    send(ser,"[0x78,0x0,0x1,0x20]")
    send(ser,"[0x78,0x00,0x01,0x8E]")
    send(ser,"[0x78, 0x40, 0x00, 0x62, 0x92, 0x92, 0x92, 0x8C, 0x00, 0x3C, 0x02, 0x02, 0x02, 0x3F, 0x00, 0x12, 0x2A, 0x2A, 0x2A, 0x04, 0x00, 0x20, 0xFC, 0x22, 0x02, 0x04, 0x00, 0x1C, 0x2A, 0x2A, 0x2A, 0x18, 0x00, 0x3E, 0x20, 0x18, 0x20, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]")
    
    send(ser,"[0x78,0x0,0x1,0x46]")
    send(ser,"[0x78,0x0,0x1,0x20]")
    send(ser,"[0x78,0x00,0x01,0x8E]")
    send(ser,"[0x78, 0x00, 0x01, 0x46, 0x00, 0x01, 0x20, 0x00, 0x01, 0x8E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]")

def drawFrameBuf():
    # Set the start posiiton to top left corner
    send(ser,"[0x78,0x00,0x01,0x40]") # Start line is 0x40
    send(ser,"[0x78,0x00,0x01,0x20]") # Not sure what the 20 represents, height?
    send(ser,"[0x78,0x00,0x01,0x8d]") # 0x8d is exact left edge

    # Try to send all at once...
    txtdat = "[0x78,0x40,"

    # Try 8 rows of 8 bits (might overwrite at the end...)
    for i in range(0,8):
        # 106 8 bit vertical lines, 8 bits high.
        # send(ser,"[0x78,0x40,0x66:106]")
        txtdat += "0x66:106,0x00:27,"
        # 27 pixels of overscan filler
        # send(ser,"[0x78,0x40,0x00:27]")
    # Replace the last comma with end thing
    txtdat = txtdat[0:-1]
    txtdat += "]"

    send(ser,txtdat)

ser=serial.Serial(BUSPIRATE_PORT, 115200, timeout=1) # is com free?
assert ser.isOpen() #throw an exception if we aren't connected
send(ser,'#') # reset bus pirate (slow, maybe not needed)
send(ser,'m') # change mode (goal is to get away from HiZ)
send(ser,'4') # i2c mode
send(ser,'4') # 100kHz
send(ser,'W') # turn power supply to ON. Lowercase w for OFF.

lcd_init()
# slowClear()
drawFrameBuf()
# drawMenu()

time.sleep(2)

ser.close()
